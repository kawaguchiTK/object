■抽象クラス
クラスを超えて共通のメソッドを実装したいとき

抽象メソッドは処理内容を持たず、継承先のクラスで必ずオーバーライド
する必要があり、特定のメソッドの実装を強制することができる
抽象クラスはクラス同士で共通化できるところを抜き出したもの


■インターフェイス
定義できるのは抽象メソッドのみ
抽象メソッドだけど,[abstruct]はつかない
アクセス修飾子にはpublicしかつかない
インスタンスの生成はできない
インターフェイスは多重継承できる

本、プログラムではHistory:setがmonsterクラスでもhumanクラスでも必ずある前提で作られている
依存しているため、History:setがあることを保証すると安全

そこでinterfaceを実装する


■ポリモーフィズム
異なる動作を同じ操作で行う

実際の実装では、異なるクラスでも同じメソッドを使うことで実現
今の環境だと、history::setはhumanクラスでもmonsterクラスでも使っている


■名前空間

クラスをディレクトリ構造のように階層的に分類できる仕組み

１つのファイルで複数のnamespaceを設定するのは推奨していない。

-----
require_once
namespace

class not found のエラーが出る場合が、、
-----


-----
require_once
use 

普通はこのセットで使う
-----


